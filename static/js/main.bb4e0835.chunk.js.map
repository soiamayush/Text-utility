{"version":3,"sources":["components/Navbar.js","components/Textarea.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","type","id","onClick","togglemode","htmlFor","Textarea","useState","text","settext","rows","placeholder","onChange","event","target","value","style","backgroundColor","newtext","toUpperCase","disabled","length","toLowerCase","navigator","clipboard","writeText","showalert","split","join","filter","element","Alert","height","alert","role","message","App","setmode","setalert","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bb4e0835.chunk.js","sourcesContent":["import React from \"react\";\r\n// import { Link } from \"react-router-dom\"\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          Text-Utils\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            \r\n\r\n          </ul>\r\n            <div className=\"form-check form-switch\">\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                id=\"flexSwitchCheckDefault\"\r\n                onClick={()=>{props.togglemode(null)}}\r\n              />\r\n              <label className={`form-check-label text-${props.mode==='light'?'drak':'light'}`} htmlFor=\"flexSwitchCheckDefault\" >\r\n                Enable dark mode\r\n              </label>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function Textarea(props) {\r\n  const [text, settext] = useState('');\r\n\r\n  const handleonchange=(event)=>{\r\n    settext(event.target.value)\r\n  }\r\n  // -------------buttton function\r\n\r\n  const handleuppcase = () => {\r\n    let newtext = text.toUpperCase();\r\n    settext(newtext);\r\n\r\n  };\r\n\r\n\r\n  const handlelowcase = () => {\r\n    let newtext = text.toLowerCase();\r\n    settext(newtext)\r\n  };\r\n  const handlecopy = () => {\r\n    navigator.clipboard.writeText(text);\r\n    props.showalert('Your text has been copied to clipboard', 'success');\r\n\r\n\r\n  };\r\n  const handlespaces = () => {\r\n    let newtext = text.split(/[ ] +/);\r\n      settext(newtext.join(' '))\r\n  };\r\n  const handleclear = () => {\r\n    let newText = '';\r\n      settext(newText);\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"mb-3 my-3\">\r\n        <h1\r\n          className={`text-${props.mode === \"light\" ? \"drak\" : \"light\"} my-3`}\r\n        >\r\n          Text utils\r\n        </h1>\r\n        <textarea\r\n          className=\"form-control my-3\"\r\n          id=\"exampleFormControlTextarea1\"\r\n          rows=\"8\"\r\n          placeholder=\"Enter your text\"\r\n          onChange={handleonchange}\r\n          value={text}\r\n          style={{backgroundColor:props.mode==='dark'? '#a5a7a2' : 'white'}}\r\n        ></textarea>\r\n\r\n        {/* --------------------------buttons */}\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary btn-sm my-2\"\r\n          onClick={handleuppcase}\r\n          disabled={text.length===0}\r\n        >\r\n          convert to uppercase\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary mx-1 btn-sm my-2\"\r\n          onClick={handlelowcase}\r\n          disabled={text.length===0}\r\n\r\n        >\r\n          Convert to lowercase\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary mx-1 btn-sm my-2\"\r\n          onClick={handlecopy}\r\n          disabled={text.length===0}\r\n\r\n        >\r\n          Copy text\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary mx-1 btn-sm my-2\"\r\n          onClick={handlespaces}\r\n          disabled={text.length===0}\r\n\r\n        >\r\n          Remove extra spaces\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary mx-1 btn-sm my-2\"\r\n          onClick={handleclear}\r\n          disabled={text.length===0}\r\n\r\n        >\r\n          Clear console\r\n        </button>\r\n      </div>\r\n      <div className=\"container\">\r\n        <h2>Text summary</h2>\r\n        <p>Your text have {(text.split(/\\s+/).filter((element)=>{return  element.length!==0}).length )} words and {text.length} characters</p>\r\n        <p>An average person takes {0.008 * (text.split(/\\s+/).filter((element)=>{return  element.length!==0}).length )} minutes to complete these words</p>\r\n        <h2>Preview</h2>\r\n        <p>{text}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n  return (\r\n    <div style={{ height: '60px' }}>\r\n      {props.alert && (\r\n        <div\r\n          className={`alert alert-${props.alert.type} alert-dismissible`}\r\n          role=\"alert\"\r\n          id=\"liveAlert\"\r\n        >\r\n          <strong>{props.alert.type}!! </strong>\r\n          {props.alert.message}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport Textarea from \"./components/Textarea\"\nimport { useState } from \"react\";\nimport Alert from './components/Alert'\n// import About from \"./components/About\"\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\nimport React from 'react'\n\n\nexport default function App() {\n  const [mode, setmode] = useState('light') \n  const [alert, setalert] = useState(null)\n  \n  \n  const togglemode = ()=>{\n    if(mode==='light'){\n      setmode('dark')\n      document.body.style.backgroundColor = '#848C7A'\n      showalert('darkmode has been enabled', 'success')\n    }\n    else{\n      setmode('light')\n      document.body.style.backgroundColor = 'white'\n      showalert('Lightmode has been enabled', 'success')\n\n    }\n  }\n\n  const showalert=(message, type)=>{\n      setalert({\n        message :  message,\n        type : type,\n      })\n      setTimeout(() => {\n        setalert(null)\n      }, 2000);\n  }\n  return (\n    // <Router>\n    <>\n    <Navbar togglemode={togglemode} mode={mode}/>\n    <Alert alert={alert}/>\n\n    {/* <Switch> */}\n          {/* <Route exact path=\"/about\"> */}\n            {/* <About /> */}\n          {/* </Route>\n          \n          \n          <Route exact path=\"/\"> */}\n\n    <Textarea mode={mode} showalert={showalert} />\n          {/* </Route>\n        </Switch> */}\n\n\n    </>\n    // </Router>\n  )\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}